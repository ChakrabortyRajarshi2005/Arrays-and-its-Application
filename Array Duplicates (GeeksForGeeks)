Array Duplicates :
Difficulty: Easy
Given an array arr of integers, 
find all the elements that occur 
more than once in the array. 
Return the result in ascending order. 
If no element repeats, return an empty array.

Examples:

Input: arr[] = [2, 3, 1, 2, 3]
Output: [2, 3] 
Explanation: 2 and 3 occur more than once in the given array.
Input: arr[] = [0, 3, 1, 2] 
Output: [] 
Explanation: There is no repeating element in the array, so the output is empty.
Input: arr[] = [2]
Output: [] 
Explanation: There is single element in the array. Therefore output is empty.
Constraints:
1 <= arr.size() <= 106
0 <= arr[i] <= 106




Code :

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        Map<Integer, Integer> freqMap =
            new HashMap<>(); // HashMap to store the frequency of elements
        for (int num : arr) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }
        List<Integer> result = new ArrayList<>(); 
        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
            if (entry.getValue() > 1) {
                result.add(entry.getKey());
            }
        }
        Collections.sort(result);

        return result; // Return the list of duplicates or empty list if none
    }
}
